name: Test Build AWS Terraform
run-name: Test AWS build pipeline
on: 
  push:
    branches: 
    -  sub-main
  pull_request: 
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR

jobs:
    test:
      runs-on: ubuntu-latest
      defaults:
        run:
            shell: bash
            working-directory: ./infrastructure/terraform
      steps: 
        -   name: Configure AWS credentials
            uses: aws-actions/configure-aws-credentials@v4
            with: 
              role-to-assume: ${{ secrets.AWS_ROLE }}
              aws-region: ${{ secrets.AWS_REGION }}
              role-session-name: Github-OIDC-Terraform
       
        -   name: Check out code
            uses: actions/checkout@v4 

        -   name: Setup Terraform
            uses: hashicorp/setup-terraform@v3
            with:
              terraform_version: 1.4.6

        -   name: Terraform fmt
            id: fmt
            run: terraform fmt -check
            continue-on-error: true

        -   name: Terraform Init
            id: init
            env:
              AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
              AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
            run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION}"

        -   name: Terraform Validate
            id: validate
            run: terraform validate -no-color

        -   name: Terraform Plan
            id: plan
            run: terraform plan -refresh=false -no-color
            if: github.event_name == 'pull_request'
            continue-on-error: true

        -   uses: actions/github-script@v7
            if: github.event_name == 'pull_request'
            env:
              PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
            with:
              github-token: ${{ secrets.TOKEN }}
              script: |
                const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
                #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
                #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
                <details><summary>Validation Output</summary>

                \`\`\`\n
                ${{ steps.validate.outputs.stdout }}
                \`\`\`

                </details>

                #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

                <details><summary>Show Plan</summary>

                \`\`\`\n
                ${process.env.PLAN}
                \`\`\`

                </details>

                *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                })

        -   name: Terraform Plan Status
            if: steps.plan.outcome == 'failure'
            run: exit 1

        -   name: Terraform Apply
            if: github.ref == 'refs/heads/sub-main' && github.event_name == 'push'
            run: terraform apply -auto-approve -input=false